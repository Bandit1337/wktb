
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime, timedelta, date
import sqlite3
import os
import locale

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä—É—Å—Å–∫–∞—è –ª–æ–∫–∞–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
try:
    locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')
except:
    pass  # Railway –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ª–æ–∫–∞–ª—å, —Ç–æ–≥–¥–∞ –≤—Ä—É—á–Ω—É—é –ø–æ–¥—Å—Ç–∞–≤–∏–º –º–µ—Å—è—Ü—ã

API_TOKEN = os.getenv("API_TOKEN")
AUTHORIZED_USERS = list(map(int, os.getenv("AUTHORIZED_IDS", "").split(",")))

WORK_START = datetime.strptime("08:30:00", "%H:%M:%S").time()
WORK_DURATION = timedelta(hours=8, minutes=30)
MAX_OVERTIME = timedelta(hours=4)

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(KeyboardButton("‚úÖ –Ø –Ω–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–∏"))
main_menu.add(KeyboardButton("üìã –ë–æ–ª—å—à–µ —Ñ—É–Ω–∫—Ü–∏–π"))

more_menu = ReplyKeyboardMarkup(resize_keyboard=True)
more_menu.add(KeyboardButton("üìÜ –û—Ç—á—ë—Ç –∑–∞ –º–µ—Å—è—Ü"), KeyboardButton("üèñÔ∏è –û—Ç–ø—É—Å–∫"))
more_menu.add(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))

cancel_menu = ReplyKeyboardMarkup(resize_keyboard=True)
cancel_menu.add(KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))

MONTH_NAMES = {
    1: "üìÖ –Ø–Ω–≤–∞—Ä—å", 2: "üìÖ –§–µ–≤—Ä–∞–ª—å", 3: "üìÖ –ú–∞—Ä—Ç", 4: "üìÖ –ê–ø—Ä–µ–ª—å",
    5: "üìÖ –ú–∞–π", 6: "üìÖ –ò—é–Ω—å", 7: "üìÖ –ò—é–ª—å", 8: "üìÖ –ê–≤–≥—É—Å—Ç",
    9: "üìÖ –°–µ–Ω—Ç—è–±—Ä—å", 10: "üìÖ –û–∫—Ç—è–±—Ä—å", 11: "üìÖ –ù–æ—è–±—Ä—å", 12: "üìÖ –î–µ–∫–∞–±—Ä—å"
}

def is_authorized(user_id):
    return user_id in AUTHORIZED_USERS

def init_db():
    conn = sqlite3.connect("data.sqlite")
    cur = conn.cursor()
    cur.execute('''CREATE TABLE IF NOT EXISTS records (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        username TEXT,
        date TEXT,
        entry_time TEXT,
        vacation INTEGER DEFAULT 0
    )''')
    conn.commit()
    conn.close()

init_db()

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    if not is_authorized(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)

@dp.message_handler(lambda m: m.text == "‚úÖ –Ø –Ω–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–∏")
async def handle_entry(message: types.Message):
    if not is_authorized(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    now = datetime.now()
    entry_time = now.time()
    today = now.date()

    delay = datetime.combine(today, entry_time) - datetime.combine(today, WORK_START)
    if delay.total_seconds() < 0:
        delay = timedelta(0)
    end_time = datetime.combine(today, entry_time) + WORK_DURATION + delay
    max_end_time = datetime.combine(today, entry_time) + WORK_DURATION + MAX_OVERTIME
    if end_time > max_end_time:
        end_time = max_end_time

    conn = sqlite3.connect("data.sqlite")
    cur = conn.cursor()
    cur.execute("INSERT INTO records (user_id, username, date, entry_time) VALUES (?, ?, ?, ?)",
                (message.from_user.id, message.from_user.username, today.isoformat(), entry_time.strftime("%H:%M:%S")))
    conn.commit()
    conn.close()

    await message.answer(
        "üö™ –í—Ö–æ–¥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n"
        "‚è∞ –í—Ö–æ–¥ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω: <b>{}</b>\n"
        "üïî –ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–π –≤—ã—Ö–æ–¥: <b>{}</b>".format(
            entry_time.strftime('%H:%M:%S'),
            end_time.strftime('%H:%M:%S')
        ),
        parse_mode="HTML"
    )

@dp.message_handler(lambda m: m.text == "üìã –ë–æ–ª—å—à–µ —Ñ—É–Ω–∫—Ü–∏–π")
async def more_menu_handler(message: types.Message):
    await message.answer("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:", reply_markup=more_menu)

@dp.message_handler(lambda m: m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)

@dp.message_handler(lambda m: m.text == "üèñÔ∏è –û—Ç–ø—É—Å–∫")
async def vacation_request(message: types.Message):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –æ—Ç–ø—É—Å–∫–∞:\n–Ω–∞–ø—Ä–∏–º–µ—Ä: 01.07‚Äì05.07",
        reply_markup=cancel_menu
    )

@dp.message_handler(lambda m: m.text == "üìÜ –û—Ç—á—ë—Ç –∑–∞ –º–µ—Å—è—Ü")
async def choose_month(message: types.Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    now = datetime.now()
    months = []
    for i in range(3):
        m = now.month - i
        y = now.year
        if m <= 0:
            m += 12
            y -= 1
        months.append((m, y))
    for m, y in months:
        label = MONTH_NAMES.get(m, f"{m}")  # emoji –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
        markup.add(KeyboardButton(label))
    markup.add(KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –æ—Ç—á—ë—Ç–∞:", reply_markup=markup)

@dp.message_handler(lambda m: m.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_handler(message: types.Message):
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=more_menu)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
